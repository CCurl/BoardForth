VM instruction set

Stack operations:
------------------------
'#':  number to stack (base 10)
'$':  number to stack (base 16)
''':  ascii val to stack
'D':  duplicate TOS
'S':  swap
'O':  over
'\':  drop
'1+': increment TOS
'1-': decrement TOS 
'R<': TOS to return stack
'R@': fetch RTOS
'R>': RTOS to data stack
'K':  TOS = TOS * 1000
'H<': TOS = TOS * $100 (left shift 8)
'H>': TOS = TOS / $100 (right shift 8)
'N1': number to stack (8-bit)
'N2': number to stack (16-bit)
'N4': number to stack (32-bit)


Memory:
---------------------------------------------
'!':  store to code area: 32-bit
'@':  fetch from code area: 32-bit
'C!': store to code area: 8-bit
'C@': fetch from code area: 8-bit
'M!': store to absolute address, 8-bit
'M@': fetch from absolute address, 8-bit


Registers: (x: a..z)
--------------------------------------------
'x!':  store TOS to register
'x@':  fetch from register
'x@+': fetch from register, then increment
'x@-': fetch from register, then decrement
'x+':  increment register
'x-':  decrement register


Math:
-----------------------
'+':  add
'-':  subtract
'*':  multiply
'/':  divide
'%':  modulo


Logical:
-----------------------
'<':  less than
'<=': less than or equal to
'=':  equal to
'<>': not equal to
'>=': greater than or equal to
'>':  greater than


Bit-wise:
----------------------------
'&':  and
'|':  or
'^':  xor
'~':  ones-complement


Flow control:
-----------------------------
'(':  if
':':  call
';':  return
'JJ': jump - unconditional
'JZ': jump if TOS == 0 (consumes TOS)
'JN': jump if TOS != 0 (consumes TOS)
'Jz': jump if TOS == 0 (does not consume TOS)
'Jn': jump if TOS != 0 (does not consume TOS)
'[':  begin loop (PC to return stack)
']':  if TOS != 0 { jump to RTOS } else { pop(), rpop() }


Block file operations:
---------------------------------------------
'FO':    file-open  (block)
'FN':    file-new   (block)
'FC':    file-close (block)
'FR':    file read (1 char)
'FW':    file read (1 char)


Output:
-----------------------------------------------
'"':  output string
',':  output TOS as char
'.':  output TOS as number (in current base)


ARDUINO: pin operations:
---------------------------------------------
'POO:    pin-open: OUTPUT
'POI:    pin-open: INPUT
'POU:    pin-open: INPUT_PULLUP
'POD:    pin-open: INPUT_PULLDOWN
'PRD':   pin-read-digital: digitalRead()
'PRA':   pin-read-analog: analogRead()
'PWD':   pin-write-digital: digitalWrite()
'PWA':   pin-write-analog: analogWrite()


Other:
----------------------------------
' ':  no-op
NULL: exit run loop
addr: exit run loop if addr is not in code space
'IA': INFO: all
'IC': INFO: code
'ID': INFO: dictionary (long)
'Id': INFO: dictionary (short)
'IR': INFO: registers
'IS': INFO: stack (long)
'Is': INFO: stack (short)
'T':  time (GetTickCount(), millis())
'W':  wait (Sleep(), delay())


Unused:
----------------------
')':  unused
'?':  unused
'A':  unused
'B':  unused
'E':  unused
'G':  unused
'L':  unused
'Q':  unused
'U':  unused
'V':  unused
'X':  unused
'Y':  unused
'Z':  unused
'_':  unused
'`':  unused
'{':  unused
'}':  unused
